////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// itemLoader.js
//
//
// responsible for loading item data from the server
// putting all of the server-communication in here allows 
// us generic access to item data from the actual application
//
//
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Webkit.Folders.ItemLoader = Ext.extend(Ext.util.Observable, {
	
	// what fields must each item contain when an items children is listed
	include_children_fields: [
		'foldericon'
	],
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// INIT
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
		
    constructor: function(config)
    {    	
    	Ext.apply(this, config);
    	
		this.addEvents(
			'itemchildrenloaded',
			'itemtreeloaded',
			'itemdataloaded'
		);
		
	
	},
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// LOADER
//
// this is what loads items from the server and provides the application with access to the data
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	loadTree: function(cfg)
	{
		if(!cfg)
		{
			cfg = {};
		}
		
		if(cfg.id==null)
		{
			cfg.id = 'root';
		}
		
		Ext.Ajax.request({
   			url: this.treeURI,
   			id:cfg.id,
   			params: {
   				id: cfg.id
   			},
   			callback: this.loadTreeResponse,
   			scope: this
   		});
	},
	
	loadTreeResponse: function(optionInfo, success, responseData)
	{
		if(!success)
		{
			alert('error loaded');
			return;
		}
		
		var itemData = null;
		
		eval('itemData = ' + responseData.responseText);
		
		var arr = [];
		
		for(var i=0; i<itemData.length; i++)
		{
			var item = this.processItemData(itemData[i]);
	
			arr.push(item);
		}
			
		this.fireEvent('itemtreeloaded', arr, optionInfo.id);
	},
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// loads the children for the given item id
	
	loadChildren: function(cfg)
	{
		if(!cfg)
		{
			cfg = {};
		}
		
		if(cfg.id==null)
		{
			cfg.id = 'root';
		}

		Ext.Ajax.request({
   			url: this.childrenURI,
   			params: {
   				id: cfg.id
   			},
   			callback: this.loadChildrenResponse,
   			scope: this
   		});
	},
	
	loadChildrenResponse: function(optionInfo, success, responseData)
	{
		if(!success)
		{
			alert('error loaded');
			return;
		}
		
		var itemData = null;
		
		eval('itemData = ' + responseData.responseText);
			
		this.fireEvent('itemchildrenloaded', this.processItemData(itemData));
	},
	
	loadItemData: function(cfg)
	{
		if(!cfg)
		{
			cfg = {};
		}
		
		if(cfg.id==null)
		{
			cfg.id = 'root';
		}

		Ext.Ajax.request({
   			url: this.itemDataURI,
   			params: {
   				id: cfg.id
   			},
   			callback: this.loadItemDataResponse,
   			scope: this
   		});
	},
	
	loadItemDataResponse: function(optionInfo, success, responseData)
	{
		if(!success)
		{
			alert('error loaded');
			return;
		}
		
		var itemData = null;
		
		eval('itemData = ' + responseData.responseText);
			
		this.fireEvent('itemdataloaded', this.processItemData(itemData));
	},
	
	processItemData: function(itemData)
	{
		if(itemData.children != null)
		{
			var newChildren = [];
		
			for(var i=0; i<itemData.children.length; i++)
			{
				newChildren.push(this.processItemData(itemData.children[i]));
			}
					
			itemData.children = newChildren;
		}
		
		return new Webkit.Folders.Item(itemData, itemData.id);
	}
	
	
});