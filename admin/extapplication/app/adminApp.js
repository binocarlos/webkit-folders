////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// AdminApp.js
//
// Extends:	App.js
//
// the main administration application for the Xara.com website
// This app builds the ext interface by using the various compononets including:
//
// itemTree.js -> builds the left hand navigation tree
// itemView.js -> builds the right hand view of am items contents (e.g. folder contents)
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Webkit.Folders.AdminApp = function(cfg)
{
	Ext.apply(this, cfg);

	Ext.onReady(this.initApp, this);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// STATIC VARIABLES
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////
// the title of this application
Webkit.Folders.AdminApp.prototype.appTitle = 'Webkit Folders';

///////////////////////////////////////////////////////
// the name of the particular installation
Webkit.Folders.AdminApp.prototype.installationName = '';


///////////////////////////////////////////////////////
// version number
Webkit.Folders.AdminApp.prototype.appVersion = '2.0';


///////////////////////////////////////////////////////
// author
Webkit.Folders.AdminApp.prototype.appAuthor = 'Webkit Ltd';


///////////////////////////////////////////////////////
// the name of the very top folder
Webkit.Folders.AdminApp.prototype.rootFolderName = 'System';

///////////////////////////////////////////////////////
// where is the upload folder mapped to
Webkit.Folders.AdminApp.prototype.uploadFolder = '/uploaded_files';


///////////////////////////////////////////////////////
// URIS

Webkit.Folders.AdminApp.prototype.applicationURIs = new Object({
	login:'/admin/index',
	logout:'/admin/logout',
	
	schema:'/admin/schema',
	
	iconList:'/admin/list_all_icons',
	
	folderTree:'/tree/index',
	
	itemChildren:'/item/children',
	
	item:'/item/index',
	itemData:'/item/item_data',
	
	
	icon:'/icon',
	
	saveItem:'/item/saveitem',
	moveItems:'/item/moveitems',
	renameItem:'/item/renameitem',
	deleteItems:'/item/deleteitems',
	
	uploadFile:'/item/uploadfile'
});



Ext.extend(Webkit.Folders.AdminApp, Webkit.Folders.App, 
{
	
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// CONFIG
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	appTitle: Webkit.Folders.AdminApp.prototype.appTitle,
	
	installationName: Webkit.Folders.AdminApp.prototype.installationName,
	
	appVersion: Webkit.Folders.AdminApp.prototype.appVersion,
	
	appAuthor: Webkit.Folders.AdminApp.prototype.appAuthor,
	
	rootFolderName: Webkit.Folders.AdminApp.prototype.rootFolderName,
	
	uploadFolder: Webkit.Folders.AdminApp.prototype.uploadFolder,
	
	applicationURIs: Webkit.Folders.AdminApp.prototype.applicationURIs,

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// DATA
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	// the collection of currently active item forms
	itemForms: {},
	
	// the current clipboard data
	clipboard: [],
	
	// the id of the system folder
	rootFolderInfo: {},
	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// INIT
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	constructor: function(config)
    {	
    	Ext.apply(this, config);
    	
		this.addEvents(
			'clipboardcleared'
		);

        Webkit.Folders.AdminApp.superclass.constructor.call(config);
	},

	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// the login process for this app is slightly different
	// because they may have already logged-in to the legacy application -
	// we first need to do a server hit to find out if a valid session already exists
	// if it does then we are already logged in and can proceed -
	// otherwise show the login form

	init : function()
	{
		Webkit.Folders.AdminApp.superclass.init.call(this);

		Ext.QuickTips.init();
		//Ext.ux.TinyMCE.initTinyMCE();
		
		this.initURIs();
		
		//Ext.state.Manager.setProvider(new Ext.state.CookieProvider());
		
		// so - the interface is built (createMainInterface) but we are not sure if we are logged in
		// lets do a server hit to find out
		
		this.initLoginRequest.defer(100, this);
	},
	
	initLoginRequest: function()
	{
		this.appRequest({
			url:this.loginURI,
			callback:this.loginStatusResponse,
			scope:this });
	},
	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// creates the URI map that requests to the server will use to lookup where the request should be sent to
	// this is based on the webapplicationURI that this application is configured with (i.e. the root of the kohana install)
	
	initURIs: function()
	{
		for(var uriName in this.applicationURIs)
		{
			this[uriName + 'URI'] = this.webapplicationURI + this.applicationURIs[uriName];
			
			Webkit.Folders.AdminApp.prototype[uriName + 'URI'] = this[uriName + 'URI'];
		}
	},
	
	

	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// so we now have the answer from the server as to whether we are logged in
	// if we are we can go straight to postLogin
	// otherwise we need to show the loginForm
	
	loginStatusResponse : function(response)
	{
		this.postLoginResponse = response;
		
		// the response object we get from the server will either have 'ok' or 'error'
		if(response.status!="ok")
		{
			this.removeLoadingPanel();
			this.showPasswordScreen();
		}
		else
		{
			this.removeLoadingPanel();
			this.createMainInterface();
		}
	},
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// what should happen once we know that we have a succesful login
	// in this case - lets load up the menu and initial folder view
	
	postLogin : function()
	{
		var response = this.postLoginResponse;
		
		Webkit.Folders.Schema.setItemSchemas(response.schemas);
		
		this.uploadFolder = response.uploadFolder;
		this.installationName = response.installationName;
		this.rootFolderInfo = response.rootFolderInfo;
		
		Webkit.Folders.AdminApp.prototype.uploadFolder = this.uploadFolder;
		
		this.createItemLoader();

		this.folderTree.addListener('loaddata', this.loadTreeData, this);

		this.folderTree.initTree(this.rootFolderInfo);
		
		this.folderTree.setInstallationName(this.installationName);
		this.folderTree.createDDZones('itemDD');
		
		this.initialLoadingFinished = false;
	},
	
	refreshSchema: function()
	{	
		this.appRequest({
			url:this.schemaURI,
			callback:this.schemaRefreshResponse,
			scope:this });
	},
	
	schemaRefreshResponse: function(response)
	{
		Webkit.Folders.Schema.setItemSchemas(response.schemas);
	},
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// EVENTS
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITEM LOADER
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

	createItemLoader: function()
	{
		this.itemLoader = new Webkit.Folders.ItemLoader({
			childrenURI:this.itemChildrenURI,
			treeURI:this.folderTreeURI,
			itemDataURI:this.itemDataURI
		});
		
		this.itemLoader.addListener('itemchildrenloaded', this.itemLoaderChildrenLoaded, this);
		this.itemLoader.addListener('itemtreeloaded', this.itemLoaderTreeDataLoaded, this);
		this.itemLoader.addListener('itemdataloaded', this.itemDataLoaded, this);
	},
		
	
	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITEM EVENTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	
		
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// this responds to an item being opened from anywhere in the system
	// - the item to be loaded and the requesting component are both provided
	//
	// the requesting component is required to implement the itemLoader interface
	// this is so it can be told that the item has been loaded ok
	
	treeLoadItem: function(item, requestor)
	{
		// lets make sure the tree is selecting the item we just opened
		this.folderTree.highlightItem(item);
		
		if(item.areChildrenAllowed())
		{
			this.loadItemChildren(item);
		}
		else
		{
			var parentItem = this.folderTree.getParentItem(item);
			
			this.loadItemChildren(parentItem);
			//this.editItem(item);
		}
	},
	
	loadItem: function(item, requestor)
	{
		// lets make sure the tree is selecting the item we just opened
		this.folderTree.highlightItem(item);
		
		if(item.areChildrenAllowed())
		{
			this.loadItemChildren(item);
		}
		else
		{
			this.editItem(item);
		}
	},
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// this responds to an item being edited in the View
	// this should open up an itemForm
	// Note that the itemRecord might have been created with a null id
	// this means that it is a new item - it will have an item_type and item_id however
	//
	// the requesting component is required to implement the itemLoader interface
	// this is so it can be told that the item has been loaded ok
	
	editItem: function(item, requestor)
	{
		this.viewPort.getEl().mask("loading data");
		
		this.currentEditItem = item;
		
		if(item.exists())
		{
			this.itemLoader.loadItemData({
				id:item.id
			});
		}
		else
		{
			this.itemDataLoaded.defer(100, this, [{}]);
		}
	},
	
	itemDataLoaded: function(item)
	{
		for(var prop in item)
		{
			this.currentEditItem[prop] = item[prop];
		}
		
		var theForm = this.createItemForm(this.currentEditItem);
	},
	
	itemFormRendered: function()
	{
		this.viewPort.getEl().unmask();
	},
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// this loads the folderView with the children of the given object id
	// if no id is given it assumes the system root
	
	loadItemChildren: function(item)
	{
		this.loadingItem = item;
		
		this.itemLoader.loadChildren({
			id:item.id
		});
	},
	
	itemLoaderChildrenLoaded: function(itemData)
	{
		var itemView = this.getCurrentItemView();

		var pathArray = this.folderTree.getItemPath(this.loadingItem);
		
		itemView.displayItemChildren(itemData, pathArray);
		
		if(!this.initialLoadingFinished)
		{
			this.removeLoadingPanel();
			this.initialLoadingFinished = true;
		}
	},	
	
	loadTreeData: function(id, forTree)
	{
		this.itemLoader.loadTree({
			id:id
		});
		
		this.treeToLoadData = forTree || this.folderTree;
	},
	
	itemLoaderTreeDataLoaded: function(itemData, id)
	{
		this.treeToLoadData.addTreeData(itemData, id);
	},
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// this deletes items - you provide an array of items that are to be deleted
	// 
	// the requesting component is required to implement the itemLoader interface
	// this is so it can be told that the item has been loaded ok
	
	deleteItems: function(deleteItems, requestor)
	{	
		var itemsTitle = '';
		
		if(deleteItems.length<=0) { return; }
		else if(deleteItems.length==1)
		{
			itemsTitle = deleteItems[0].get('name');
		}
		else if(deleteItems.length>1)
		{
			itemsTitle = 'these ' + deleteItems.length + ' items';	
		}
		
		for(var i=0; i<deleteItems.length; i++)
		{
			var	deleteItem = deleteItems[i];
			
			if(deleteItem.getSchemaProperty('access')=='system')
			{
				Ext.MessageBox.alert('Cannot Delete Item!', 'This item is a system object');
				return;
			}
		}
		
		// lets check to see if the items are in the bin or if we will delete them from the bin
		
		var messageString = 'Are you sure you want to delete ' + itemsTitle + '?';
			
		Ext.MessageBox.confirm('Delete Items', messageString, this.deleteItemsConfirmed, this);
		
		this.deleteItems = deleteItems;
	},

	deleteItemsConfirmed : function(button_id)
	{
		if(button_id!='yes') { return; }
	
		var deleteItemIDS = [];
		
		for(var i=0; i<this.deleteItems.length; i++)
		{
			deleteItemIDS.push(this.deleteItems[i].id);
		}
		
		this.deleteItemIDS = deleteItemIDS;
		
		this.appRequest({
			url:this.deleteItemsURI,
			callback:this.deleteItemsResponse,
			scope:this,
			returnParams:deleteItemIDS,
			params:{
				ids:deleteItemIDS.join(':')
			}
		});
	},
	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// the server has confirmed the change so lets load up the new folder
	
	deleteItemsResponse : function(response)
	{
		var binId = response.bin_id;
		
		var itemView = this.getCurrentItemView();
		
		itemView.reloadItem();
		
		for(var i=0; i<this.deleteItemIDS.length; i++)
		{
			var id = this.deleteItemIDS[i];
			
			if(binId!=null)
			{
				this.folderTree.moveItemToFolderById(binId, id, true);
			}
			else
			{
				this.folderTree.removeNodeById(id);
			}
		}
	},
	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// this responds to the name of an item changing
	// it pings the server with the new name as well as tell the left hand tree the name has changed
	//
	// the requesting component is required to implement the itemLoader interface
	// this is so it can be told that the item has been loaded ok
	
	itemNameChanged: function(item, requestor)
	{
		this.folderTree.renameItem(item);
		
		var itemView = this.getCurrentItemView();
		
		// the folder path is an array of items
		//itemView.setItemPath(this.folderTree.getItemPath(itemView.getCurrentItem()));
		
		this.appRequest({
			url:this.renameItemURI,
			callback:this.folderViewItemNameChangedResponse,
			scope:this,
			params:{
				id:item.id,
				name:item.get('name')
			}
		});
	},
	
	
	folderViewItemNameChangedResponse: function(response)
	{
		
	},
	

	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// ITEM FORM
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// creates an itemForm from the given itemRecord
	
	createItemForm : function(item)
	{
		/*
		var theForm = this.itemForms[item.id];
		
		if(theForm)
		{
			theForm.highlightWindow();
			return;
		}
		*/
		
		var itemView = this.getCurrentItemView();
		
		var theForm = new Webkit.Folders.ItemForm({
			parentItem: itemView.currentItem,
			item: item
		});
		
		//theForm.addListener('destroy', this.destroyItemForm, this);
		theForm.addListener('itemsaved', this.itemFormSaved, this);
		theForm.addListener('item_form_rendered', this.itemFormRendered, this);
		
		//this.itemForms[item.id] = theForm;
		
		theForm.activateWindow();
		
		
	},
	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// destroys the item form and removes it from the map
	
	destroyItemForm: function(itemForm)
	{
		delete(this.itemForms[itemForm.id]);
		delete(itemForm);
	},
	
	
	itemFormSaved: function(item, JSON, itemForm)
	{
		this.appRequest({
			url:this.saveItemURI,
			callback:this.itemFormSavedResponse,
			scope:this,
			returnParams:itemForm,
			params:{
				id:item.id,
				parent_id:itemForm.parentItem.id,
				json:JSON
			}
		});
	},
	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// the server has confirmed the change so lets load up the new folder
	
	itemFormSavedResponse : function(response, itemForm)
	{
		if(response.status == "ok")
		{
			var itemView = this.getCurrentItemView();
		
			var currentItem = itemView.currentItem;
			var currentID = currentItem.id;
			
			var savedItem = itemForm.item;
			var parentID = itemForm.item.get('parent_id');
			
			savedItem.new_id = response.id;
			
			if(currentID == 'root')
			{
				currentID = '';
			}
			
			if(parentID == 'root')
			{
				parentID = '';
			}
			
			if(parentID == currentID)
			{
				itemView.reloadItem();
			}
			
			if(savedItem.doeSchemaInheritFrom('folder'))
			{
				this.folderTree.reloadItemId(parentID);
				
				//this.folderTree.itemSaved(savedItem);
			}
			
			itemForm.destroy();
			//this.destroyItemForm(itemForm);
			
			if(savedItem.getSchemaProperty('on_save') == 'refresh_schema')
			{
				this.refreshSchema();
			}
		}
		else
		{
			itemForm.setError(response.error);
		}
	},
	
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MOVE ITEMS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// this responds to items being moved into another item
	// it issues the server request then reloads the view with the dropNode (to list the folders new contents)
	// it also looks after juggling the item tree so it dosn't have to reload
	//
	// this moves the pointers to another place - i.e. the source will have moved when complete
	
	moveItems: function(destinationItem, sourceItemArray, requestor)
	{
		this.moveMode = 'move';
		this.doItemMove(destinationItem, sourceItemArray, requestor);
	},
	
	copyItems: function(destinationItem, sourceItemArray, requestor)
	{
		this.moveMode = 'copy';
		this.doItemMove(destinationItem, sourceItemArray, requestor);
	},
	
	ghostItems: function(destinationItem, sourceItemArray, requestor)
	{
		this.moveMode = 'ghost';
		this.doItemMove(destinationItem, sourceItemArray, requestor);
	},
		
	doItemMove: function(destinationItem, sourceItemArray, requestor)
	{
		this.moveItemsData = {
			destinationItem:destinationItem,
			sourceItemArray:sourceItemArray };
			
		var sourceTitleString = '';
		
		if(sourceItemArray.length==1)
		{
			sourceTitleString = sourceItemArray[0].get('name');
		}
		else
		{
			var count = sourceItemArray.length;
			
			sourceTitleString = 'these ' + count + ' items';
		}
		
		var messageString = 'Are you sure you want to ' + this.moveMode + ' ' + sourceTitleString + ' into ' + destinationItem.get('name') + '?';
			
		Ext.MessageBox.confirm(Ext.capitalizeWord(this.moveMode) + ' Items', messageString, this.moveItemsConfirmed, this);
	},

	moveItemsConfirmed : function(button_id)
	{
		if(button_id!='yes') { return; }
	
		var destinationItem = this.moveItemsData.destinationItem;
		var sourceItemArray = this.moveItemsData.sourceItemArray;

		var sourceItemIDS = [];
		
		for(var i=0; i<sourceItemArray.length; i++)
		{
			sourceItemIDS.push(sourceItemArray[i].id);
		}
		
		this.appRequest({
			url:this.moveItemsURI,
			callback:this.moveItemsResponse,
			scope:this,
			params:{
				move_mode:this.moveMode,
				destination_item_id:destinationItem.id,
				source_item_ids:sourceItemIDS.join(':')
			}
		});
	},
	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// the server has confirmed the change so lets load up the new folder
	
	moveItemsResponse : function(response)
	{
		var destinationItem = this.moveItemsData.destinationItem;
		var sourceItemArray = this.moveItemsData.sourceItemArray;
	
		var itemView = this.getCurrentItemView();
		
		if(this.moveMode=='move')
		{
			this.folderTree.moveItemsToFolder(destinationItem, sourceItemArray);
		}
		else
		{
			this.folderTree.copyItemsToFolder(destinationItem, sourceItemArray);
		}

		this.loadItem(destinationItem);
	},		
	
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// CLIPBOARD
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	clipboardMenuClicked: function(menuItem, e)
	{
		if(menuItem.id == 'root-clipboard-empty')
		{
			this.clearClipboardData();
		}
	},
	
	clipboardEditMenuClicked: function(menuItem, e)
	{
		var newClipboard = [];
		
		for(var i=0; i<this.clipboard.length; i++)
		{
			var clipboardItem = this.clipboard[i];
			
			if(clipboardItem.id != menuItem.item_id)
			{
				newClipboard.push(clipboardItem);		
			}
		}
		
		this.clipboard = newClipboard;
		
		this.reflowClipboardMenu();
	},

	clipboardGhost: function(selectedItems, requestor)
	{
		if(this.containsSystemObject(selectedItems))
		{
			Ext.Msg.alert('Cannot Ghost', 'you cannot copy system objects');
			return false;
		}
		
		this.clipboardMode = 'ghost';
		
		this.addClipboardItems(selectedItems);
	},
	
	clipboardCopy: function(selectedItems, requestor)
	{
		if(this.containsSystemObject(selectedItems))
		{
			Ext.Msg.alert('Cannot Copy', 'you cannot copy system objects');
			return false;
		}
		
		this.clipboardMode = 'copy';
		
		this.addClipboardItems(selectedItems);
	},
	
	clipboardCut: function(selectedItems, requestor)
	{
		if(this.containsSystemObject(selectedItems))
		{
			Ext.Msg.alert('Cannot Cut', 'you cannot cut system objects');
			return false;
		}
		
		this.clipboardMode = 'cut';
		
		this.addClipboardItems(selectedItems);
	},
	
	clipboardPaste: function(pasteToItem, requestor)
	{
		var itemView = this.getCurrentItemView();
			
		if(!itemView.canPaste(this.clipboardMode))
		{
			Ext.Msg.alert('Cannot Paste', 'sorry - it is not possible to paste these items into ' + pasteToItem.get('name'));
			return false;
		}
		
		if(this.clipboardMode == 'cut')
		{
			this.moveItems(pasteToItem, this.clipboard, requestor);	
		}
		else if(this.clipboardMode == 'copy')
		{
			this.copyItems(pasteToItem, this.clipboard, requestor);
		}
		else if(this.clipboardMode == 'ghost')
		{
			this.ghostItems(pasteToItem, this.clipboard, requestor);
		}
		
		this.clearClipboardData();
	},

	hasClipboardItems: function()
	{
		if(this.clipboard.length>0) { return true; }
		else { return false; }	
	},
	
	clipboardDataRequested: function(objectToCopyInto)
	{	
		var clipboardData = {
			data:this.clipboard,
			mode:this.clipboardMode
		};
		
		objectToCopyInto.clipboardData = clipboardData;
	},
	
	getClipboardItems: function()
	{
		return this.clipboard;
	},
	
	addClipboardItems: function(selectedItems)
	{
		this.clipboard = [];
		
		for(var i=0; i<selectedItems.length; i++)
		{
			this.clipboard.push(selectedItems[i]);
		}
		
		var title = '';
		var text = '';
		
		if(selectedItems.length==0)
		{
			return;
		}
		else if(selectedItems.length==1)
		{
			title = Webkit.Folders.Language.getLabel('clipboard_item_added');
			text = '"' + selectedItems[0].get('name') + '" ' + Webkit.Folders.Language.getLabel('clipboard_item_added_message');
		}
		else
		{
			title = Webkit.Folders.Language.getLabel('clipboard_items_added');
			text = selectedItems.length + Webkit.Folders.Language.getLabel('clipboard_items_added_message');	
		}
		
		
		//('Button Click', 'You clicked the {0} button', btn);
		Ext.quickMessage.msg(title, text);
		
		this.reflowClipboardMenu();
	},
	
	clearClipboardData: function()
	{
		this.clipboardMode = '';
		this.clipboard = [];
		
		var itemView = this.getCurrentItemView();
		
		itemView.clipboardDataCleared();
		
		this.reflowClipboardMenu();
	},

	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// TOP MENU
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
	
	helpMenuClicked: function(menuItem, e)
	{
		if(menuItem.id == 'root-help-about')
		{
			this.openAboutWindow();
		}
	},
	
	userMenuClicked: function(menuItem, e)
	{
		if(menuItem.id == 'root-user-fullscreen')
		{
			alert('Fullscreen');
		}
		if(menuItem.id == 'root-user-logout')
		{
			this.logout();
		}
	},
	
	languageMenuClicked: function(menuItem, e)
	{
		if(menuItem.id == 'root-language-us')
		{
			alert('English');
		}
		if(menuItem.id == 'root-language-de')
		{
			alert('German');
		}
	},	
	
	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// a request to logout has been issued
	
	logout: function()
	{
		this.appRequest({
			url:this.logoutURI,
			callback:this.logoutResponse,
			scope:this
		});
	},
	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// the server has logged us out so lets refresh
	
	logoutResponse : function(response)
	{
		document.location.reload();
	},
	
	openAboutWindow: function()
	{
		var theDate = new Date();
		
		var messageHTML = '<div style="margin-top:10px;width:400px;">' + this.appTitle + '<br/><br/>'
		
		messageHTML += 'version: ' + this.appVersion + '<br/><br/>';
		
		messageHTML += '&copy; ' + this.appAuthor + ' ' + theDate.getFullYear() + '.</div>';
		
		Ext.Msg.alert(this.appTitle, messageHTML);
	},
	
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// Helpers
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	containsSystemObject: function(itemArray)
	{
		for(var i=0; i<itemArray.length; i++)
		{
			var checkItem = itemArray[i];
			
			if(checkItem.isSystemObject())
			{
				return true;
			}
		}
		
		return false;
	},
	
	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// GUI
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// TOP MENU
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	
	reflowClipboardMenu: function()
	{
		this.clipboardEditMenu.removeAll();
		
		var title = '';
		var disableRemove = true;
		var disableEmpty = true;
		
		if(this.clipboard.length<=0)
		{
			title = 'The clipboard is empty';
		}
		else if(this.clipboard.length==1)
		{
			disableRemove = false;
			disableEmpty = false;
			
			title = this.clipboard[0].get('name') + ' (' + this.clipboardMode + ')';
		}
		else
		{
			disableRemove = false;
			disableEmpty = false;
			
			title = this.clipboard.length + ' items (' + this.clipboardMode + ')';
		}
		
		var infoComponent = this.clipboardMenu.getComponent('root-clipboard-info');
		
		if(infoComponent.rendered)
		{
			infoComponent.getEl().update(title);
		}
		else
		{
			infoComponent.text = title;
		}
		
		this.clipboardEditButton.setDisabled(disableRemove);
		this.clipboardEmptyButton.setDisabled(disableEmpty);
		
		if(this.clipboard.length<=0) { return; }
		
		var buttonData = [];
		
		for(var i=0; i<this.clipboard.length; i++)
		{
			var clipboardItem = this.clipboard[i];
			
			buttonData.push({
				id: 'clipboard-' + clipboardItem.id,
				item_id: clipboardItem.id,
				icon: Webkit.Folders.IconFactory.makeItemIconURI(clipboardItem),
				text: clipboardItem.get('name') + ' (' + this.clipboardMode + ')'
			});
		}
		
		this.clipboardEditMenu.add(buttonData);
	},
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// the title panel builder - this adds the top level menu
	
	createTitlePanel: function()
	{    	
    	this.userMenu = new Ext.menu.Menu({
        	id:'root-user-menu',
        	items: [{
        		id: 'root-user-fullscreen',
        		icon: Webkit.Folders.IconFactory.makeIconURI({name:'fit_to_size'}),
				text: Webkit.Folders.Language.getLabel('mainmenu_user_fullscreen')
				},{
				id: 'root-user-logout',
        		icon: Webkit.Folders.IconFactory.makeIconURI({name:'exit'}),
				text: Webkit.Folders.Language.getLabel('mainmenu_user_logout')
			}]
    	});	
    	
		this.userMenu.addListener('itemclick', this.userMenuClicked, this);
		
		this.clipboardEditMenu = new Ext.menu.Menu({
        	id:'root-clipboard-edit-menu',
        	items: []
    	});
    	
    	this.clipboardEditButton = new Ext.menu.Item({
        	id: 'root-clipboard-remove',
        	icon: Webkit.Folders.IconFactory.makeIconURI({name:'clipboard_delete'}),
			text: Webkit.Folders.Language.getLabel('mainmenu_clipboard_clearitems'),
			disabled:true,
			menu: this.clipboardEditMenu
		});
		
		this.clipboardEmptyButton = new Ext.menu.Item({
        	id: 'root-clipboard-empty',
        	icon: Webkit.Folders.IconFactory.makeIconURI({name:'clipboard_empty'}),
        	disabled:true,
			text: Webkit.Folders.Language.getLabel('mainmenu_clipboard_emptyclipboard')
		});
		
		this.clipboardMenu = new Ext.menu.Menu({
        	id:'root-clipboard-menu',
        	items: [{
        		id: 'root-clipboard-info',
				text: Webkit.Folders.Language.getLabel('clipboard_empty'),
				cls: 'clipboard-info',
				icon: Ext.BLANK_IMAGE_URL,
        		xtype: 'menutextitem'
        	},
        		'-',
        		this.clipboardEditButton,
        		'-',
        		this.clipboardEmptyButton
        	]
    	});	
    	
		this.clipboardMenu.addListener('itemclick', this.clipboardMenuClicked, this);
		this.clipboardEditMenu.addListener('itemclick', this.clipboardEditMenuClicked, this);
    	
    	this.helpMenu = new Ext.menu.Menu({
        	id: 'root-help-menu',
        	items: [{
        		id: 'root-help-about',
        		icon: Webkit.Folders.IconFactory.makeIconURI({name:'about'}),
        		text: Webkit.Folders.Language.getLabel('mainmenu_help_about')
        	}]
        });
        
        this.helpMenu.addListener('itemclick', this.helpMenuClicked, this);


    	this.languageMenu = new Ext.menu.Menu({
        	id: 'root-language-menu',
        	items: [{
        		id: 'root-language-us',
        		icon: Webkit.Folders.IconFactory.makeIconURI({name:'flag_us'}),
        		text: Webkit.Folders.Language.getLabel('mainmenu_language_us')
        		},{
        		id: 'root-language-de',
        		icon: Webkit.Folders.IconFactory.makeIconURI({name:'flag_de'}),
        		text: Webkit.Folders.Language.getLabel('mainmenu_language_de')
        	}]
        });
         
        this.languageMenu.addListener('itemclick', this.languageMenuClicked, this); 
        
        var panelConfig = {
			height:53,
			region:'north' 
		};
		
		if(this.renderConfig)
		{
			panelConfig.renderTo = this.renderConfig.toolbar.div;
		}
        		
		this.titlePanel = new Ext.Toolbar(panelConfig);
		
		this.titlePanel.add({
            text: Webkit.Folders.Language.getLabel('mainmenu_user'),
            width: 50,
            iconAlign: 'top',
            scale: 'medium',
            icon: Webkit.Folders.IconFactory.makeIconURI({
            	name:'user3',
            	scale: 'medium'
            }),
            style: 'margin-left: 10px; margin-right: 10px;',
            menu: this.userMenu
        });
        
        this.clipboardTopButton = new Ext.Button({
            text: Webkit.Folders.Language.getLabel('mainmenu_clipboard'),
            width: 50,
            iconAlign: 'top',
            scale: 'medium',
            icon: Webkit.Folders.IconFactory.makeIconURI({
            	name:'clipboard',
            	scale: 'medium'
            }),
            style: 'margin-left: 10px; margin-right: 10px;',
            menu: this.clipboardMenu
        });
        
        this.titlePanel.add(this.clipboardTopButton);
        
        this.titlePanel.add('->');

        this.titlePanel.add({
        	  //text: Webkit.Folders.Language.getLabel('mainmenu_language'),
            width: 50,
            iconAlign: 'top',
            scale: 'medium',
            icon: Webkit.Folders.IconFactory.makeIconURI({
            	name: Webkit.Folders.Language.getLabel('icon'),
            	scale: 'medium'
            }),
            style: 'margin-right: 10px;',
            height: 48,
            menu: this.languageMenu
        });	 
               
        this.titlePanel.add({
            //text: Webkit.Folders.Language.getLabel('mainmenu_help'),
            width: 50,
            iconAlign: 'top',
            scale: 'medium',
            icon: Webkit.Folders.IconFactory.makeIconURI({
            	name:'help2',
            	scale: 'medium'
            }),
            style: 'margin-left: 10px;',
            height: 48,
            menu: this.helpMenu
        });	
        
        this.titlePanel.doLayout();
 },
		

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// MAIN GUI
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	// if they have request that an item be opened in a new tab - we have to replace
	// the existing dataView with a tabPanel that has the extra view in it!
	
	loadItemView: function(forItem)
	{
		this.folderView.replaceItem(forItem);
	},
	
	getCurrentItemView: function()
	{
		return this.folderView.getItemView();
	},
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// the main interface builder - this is called at the very start to get the heavy lifting done
	// you don't have to make anything you build here visible - point is if it needs building
	// before the application is up and running - build it here!

	createMainInterface : function()
	{		
		this.initURIs();
		
		//alert(Webkit.Folders.Language.getLabel('edit'));
		
		//////////////////////////////////////////////////////////////
		// this is the folder tree - it is an item tree that loads only folders
		
		this.folderTree = new Webkit.Folders.ItemTree({
			id:'folderTree',
			rootFolderName:this.rootFolderName,
			itemDropEnabled:true,
			renderConfig:this.renderConfig,
			name:' '
		});
		
		this.folderTree.addListener("afterrender", this.folderTreeRendered, this);
		
		//////////////////////////////////////////////////////////////
		// this is the folder view - it displays the contents of a folder
		/*
		this.folderView = new Webkit.Folders.ItemView({
			id:'folderView',
			name:this.rootFolderName,
			uri:this.itemChildrenURI
		});
		*/
		
		this.createTitlePanel();
		
		
		//////////////////////////////////////////////////////////////
		// this is the viewPort - the main container for the gui and the thing that is added to the top of the DOM

		
		this.folderView = new Webkit.Folders.ItemViewTabPanel({
			uri:this.itemChildrenURI,
			renderConfig:this.renderConfig,
			rootFolderName:this.rootFolderName
		});
		
		this.folderView.addListener("afterrender", this.folderViewRendered, this);
		
		
		//this.createEventListeners();
		//this.createFolderViewEventListeners();
		
		if(!this.renderConfig)
		{
			this.viewPort = new Ext.Viewport({
	    		layout: 'border',
    			items: [this.folderTree.panel, this.titlePanel, this.folderView.panel]
			});
		}
	},
	
	folderViewRendered: function()
	{
		this.folderViewRenderFlag = true;
		
		this.createFolderViewEventListeners();
		
		if(this.folderTreeRenderFlag)
		{
			this.postLogin();
		}
	},
	
	folderTreeRendered: function()
	{
		this.folderTreeRenderFlag = true;
		
		this.createFolderTreeEventListeners();
		
		if(this.folderViewRenderFlag)
		{
			this.postLogin();
		}
	},
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// maps component events onto functions
	
	createFolderTreeEventListeners : function()
	{		
		//////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////
		// FOLDER TREE
	
		// event for a click on the folderTree - this triggers the folderView.loadData method
		this.folderTree.addListener("loaditem", this.treeLoadItem, this);
		
		
		// event for when some items have been moved into another one (drag and drop)
		this.folderTree.addListener("moveitems", this.moveItems, this);
	},
	
	createFolderViewEventListeners: function()
	{
		var folderView = this.folderView.getItemView();
		
		//////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////
		// FOLDER VIEW EVENTS
		
		// event for an item in the itemView being 'viewed' - this usually means opening a folder
		// but could be opening a document to edit etc
		folderView.addListener("loaditem", this.loadItem, this);
		
		// event for an item in the itemView being 'edited' - this means using an itemForm to
		// change its values rather than looking at a view of it
		folderView.addListener("edititem", this.editItem, this);
		
		// event for when items have been deleted
		folderView.addListener("deleteitems", this.deleteItems, this);
		
		// triggers when the name of an item has changed from the dataview inline editor
		folderView.addListener("itemnamechanged", this.itemNameChanged, this);
		
		
		
		// event for when some items have been moved into another one (drag and drop)
		folderView.addListener("moveitems", this.moveItems, this);
		
		
		
		// when some items are cut in the dataview we need to add them to the clipboard
		folderView.addListener("clipboardcut", this.clipboardCut, this);		
		
		// when some items are cut in the dataview we need to add them to the clipboard
		folderView.addListener("clipboardcopy", this.clipboardCopy, this);		
		
		// ghost items to clipboard
		folderView.addListener("clipboardghost", this.clipboardGhost, this);		
		
		// when some items are cut in the dataview we need to add them to the clipboard
		folderView.addListener("clipboardpaste", this.clipboardPaste, this);	
		
		
		
		// if the clipboard data is needed - we shall return it
		folderView.addListener("clipboardrequested", this.clipboardDataRequested, this);
	}
	
	
	


});