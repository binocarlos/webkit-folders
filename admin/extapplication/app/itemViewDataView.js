////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// itemViewDataView.js
//
// This allows a dataview to group its items by a provided field
// It overrides the 'collectData' method which will distill the items into
// collections based on the config
//
// The template given to this DataView must line up with the fields
// It must have a single 'group_name' property and then an 'items' loop
// which will render each item in the group
//
// The template is replicated across all of the groups
//
// If this.groupBy is set to null then no grouping will take place and it bahaves like normal
//
// the config is
//
//	 	groupBy = the field to make groups of items out of - DEFAULT null
//
//
// tpl = new Ext.XTemplate(
//			'<tpl for=".">',
//				'<h3>{group_name}</h3>',
//				'<hr>',
//				'<tpl for="items">',
//       				'<div class="details-item" id="{id}">',
//       	    			'<img src="{details_icon_url}" align="absbottom" /> {name}',
//           			'</div>',
//           		'</tpl>'
//			'</tpl>'
//		);
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Webkit.Folders.ItemViewDataView = function(config)
{
    Webkit.Folders.ItemViewDataView.superclass.constructor.call(this, config);
    
    this.init();
};


Ext.extend(Webkit.Folders.ItemViewDataView, Ext.DataView, {
	
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// INIT
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	
	
	dragSelectorUsed: false,
	
	itemsWereDragged: false,
	
	init: function()
	{
		this.addEvents(
			'itemnamechanged',	// an items name has changed
			'dropitems',		// an item has been dropped on another
			'heightchanged'		// the content has reloaded and the height has changed
		);
		
		this.store.groupBy = this.groupBy;
		
		//this.store.addListener('beforeload', this.addLoadingMessage, this);
		//this.store.addListener('load', this.removeLoadingMessage, this);
		
		//this.store.addListener('add', this.resizePanelToContent, this);

		this.on('render', this.postRender, this);
		this.on('resize', this.panelResized, this);
	},
	
	// this is when the viewable area gets resized - ignore the scroll content below
	panelResized: function()
	{
		if(!this.hasRenderedFlag) { return; }
		
		var viewElem = this.getEl();
		this.initElemSize = viewElem.getHeight();
		
		this.resizePanelToContent();
	},
	
	resizePanelToContent: function()
	{
		if(this.store.getCount()<=0) { return; }
		
		var lastElem = Ext.fly(this.getNode(this.store.getCount()-1));
		
		var viewElem = this.getEl();
		var parentPanel = this.findParentByType('panel');
		
		if(!this.initElemSizeSet)
		{
			this.initElemSizeSet = true;
			this.initElemSize = viewElem.getHeight();	
		}

		var theHeight = this.initElemSize;
		
		if(lastElem)
		{
			if(lastElem.getY() > parentPanel.getHeight())
			{
				theHeight = lastElem.getY();	
			}
		}
		
		viewElem.setHeight(theHeight);
	},
	
	postRender: function()
	{
		this.hasRenderedFlag = true;
		
		this.titleEditor = new Webkit.Folders.ItemViewLabelEditor();
		
		this.createDDZones();
	},
	
    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// DATA
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// Override the collect data method so we can group things together
	// before writing the template
	//
	// If groupBy is not defined then return normal data
	//
	// We are going to group the items on this.groupBy which could be the value of a keyword
	
	collectData : function(records)
	{
		if(this.groupBy==null)
		{
			return Webkit.Folders.ItemViewDataView.superclass.collectData.call(this, records);
		}
		else
		{
			return this.collectGroupedData(records);
		}
	},
	
	collectGroupedData : function(records)
	{
		var valueMap = {};
		
		for(var i=0; i<records.length; i++)
		{
			var record = records[i];
			
			var groupValue = record.get(this.groupBy);
			
			if(groupValue==null)
			{
				groupValue = 'None';
			}
			
			if(valueMap[groupValue]==null)
			{
				valueMap[groupValue] = [];
			}
			
			valueMap[groupValue].push(this.prepareData(record.data));
		}
		
		//return ret;
		
		var returnData = [];
		
		for(var groupValue in valueMap)
		{	
			var dataArray = valueMap[groupValue];
			
			returnData.push({
				id: 'group-' + returnData.length,
				order: returnData.length,
				item_name: this.getCurrentItemTitle(),
				group_name: this.getGroupTitle(groupValue),
				items: dataArray
			});
		}
		
		return returnData;
    },    
    	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// EVENTS
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// Override the onClick so we can see if it is a group toggle
	
    onClick: function(e)
    {
    	if(this.dragSelectorUsed)
    	{
    		this.dragSelectorUsed = false;
    		return;
    	}
    	
    	if(this.itemsWereDragged)
    	{
    		this.itemsWereDragged = false;
    		return;
    	}
    	
        var imgItem = e.getTarget('img.group-header-toggle', this.getTemplateTarget());
        
        if(imgItem)
        {
        	var groupItem = e.getTarget('div.group-header-block', this.getTemplateTarget());
        	
        	var groupElement = new Ext.Element(groupItem);
        	
        	var itemsElement = Ext.get('itemview-group-' + groupElement.getAttribute('order'));
        	itemsElement.setVisibilityMode(Ext.Element.DISPLAY);
        	
        	var newVisibility = !itemsElement.isVisible();
        	
        	itemsElement.setVisible(newVisibility);
        	
        	var baseImage = 'plus';
        	
        	if(newVisibility)
        	{
        		baseImage = 'minus';
        	}
        	
        	var imgUrl = './images/folder_view/item_view_group_toggle_' + baseImage + '.gif';
        	
        	var imgElement = Ext.get('itemview-img-' + groupElement.getAttribute('order'));
        	
        	imgElement.set({
        		src: imgUrl
        	});
        }
        
        var titleNode = e.getTarget('span.icons-title', this.getTemplateTarget());
        
        if(titleNode)
        {
        	if(e.ctrlKey || e.shiftKey)
        	{
	        	return true;
        	}
        	
        	var itemNode = e.getTarget(this.itemSelector, this.getTemplateTarget());
        	var itemRecord = this.getRecord(itemNode);
        	
        	this.editItemTitle(titleNode, itemRecord, e);
        }
        else
        {
			this.hideTitleEditor();
        }
        
        return Webkit.Folders.ItemViewDataView.superclass.onClick.call(this, e);
    },
    

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// PUBLIC INTERFACE
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// selects all items in the dataview
	
	selectAllItems: function()
	{
		this.selectRange(0, this.store.getCount() - 1);
	},
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// returns an item node based on the given event object
	
    getNodeFromEvent: function(e)
    {
    	var node = e.getTarget(this.itemSelector, this.getTemplateTarget());
    	
    	return node;
    },
    
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// this does the actual refreshing

    refreshPanel: function()
    {
		this.tpl = this.constructTemplate(this.currentTemplate);
		
		if(this.rendered)
        {
			this.refresh();
		
			this.render();
		}
	},    
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// change the field being used to group items together
	
    setGroupBy: function(groupField)
    {
    	this.groupBy = groupField;
    	
    	this.tpl = this.constructTemplate(this.currentTemplate);
    	
    	this.store.setGroupBy(groupField);
    },
    

    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// Change the item selector being used to choose item nodes
    
    setItemSelector: function(selector)
    {
    	this.dragZone.itemSelector = selector;
    	this.itemSelector = selector;
    },    
	    

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// DRAG / DROP
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    
	unGhostAllNodes : function()
	{
		var allNodes = this.getNodes();
				
		for(var i=0; i<allNodes.length; i++)
		{
	    	var ghostElement = new Ext.Element(allNodes[i]);
	    	
	    	ghostElement.setOpacity(1);
	    }
    },
    
    rollOverGhostNode: function(theNode)
    {
    	if(theNode==null) { return; }
    	
    	var ghostElement = Ext.fly(theNode);
    	ghostElement.setOpacity(1);
    },
    
    rollOutGhostNode: function(theNode)
    {
    	var ghostElement = Ext.fly(theNode);
    	var ghostRecord = this.getRecord(theNode);
    	
    	var testId = '' + ghostRecord.id;
    	
    	if(this.ghostExceptMap[testId])
    	{
			return;
    	}
    	
    	ghostElement.setOpacity(0.3);
    },
    
    // Ghost nodes expects either an object of highlighted ids or a plain id
    
    ghostNodes: function(exceptGiven)
    {
    	var exceptMap = {
    		
    	};
    	
    	if(typeof(exceptGiven)=='object')
    	{
    		for(var prop in exceptGiven)
    		{
    			exceptMap[prop] = exceptGiven[prop];
    		}
    	}
    	else
    	{
    		var value = '' + exceptGiven;
    		
    		exceptMap[value] = exceptGiven;
    	}
    	
    	this.ghostExceptMap = exceptMap;
    	    	
    	var allNodes = this.getNodes();
    	
    	for(var i=0; i<allNodes.length; i++)
		{
	    	var ghostElement = Ext.fly(allNodes[i]);
	    	var ghostRecord = this.getRecord(allNodes[i]);
	    	
	    	if(!this.ghostExceptMap[ghostRecord.id])
	    	{
	    		ghostElement.setOpacity(0.3);
	    	}
	    }
    },
    		    
	resetDragVariables: function()
	{
		this.dragSelectorUsed = false;
		this.itemsWereDragged = false;
	},
	
	createDDZones: function()
	{
		var theDataView = this;
		
		this.getEl().addListener('mousedown', this.resetDragVariables, this);
		
    	this.dragZone = new Ext.dd.DragZone(theDataView.getEl(), {
				
			ddGroup: 'itemDD',
			
			template: this.constructPlainTemplate('details'),
			
			onDrag: function(e)
			{
				if(this.ghostFlag) { return true; }
				this.ghostFlag = true;
				
				theDataView.hideTitleEditor();
				
				theDataView.itemsWereDragged = true;
				
				theDataView.clearSelections(true);
				
				var data = this.itemDragData;
				
				var selectedNodes = data.draggedNodes;
				var selectedRecords = data.draggedRecords;
				
				var ghostHighlightMap = {};
				
				for(var i=0; i<selectedNodes.length; i++)
	    		{
	    			var selectedElement = new Ext.Element(selectedNodes[i]);

	    			theDataView.select(selectedNodes[i], true);
	    		}
	    		
	    		for(var i=0; i<selectedRecords.length; i++)
	    		{
	    			var selectedRecord = selectedRecords[i];
	    			
	    			ghostHighlightMap[selectedRecord.id] = 1;
	    		}
	    		
	    		theDataView.ghostNodes(ghostHighlightMap);
	    		
	    		return true;
			},
			
			afterRepair : function()
			{
				theDataView.unGhostAllNodes();
				
				this.dragging = false;
    		},
				
			getDragData: function(e) 
			{
				this.ghostFlag = false;
				
				var sourceEl = e.getTarget(theDataView.itemSelector, 10);

				if (sourceEl)
				{	
					var div = document.createElement('div');
					
					div.id = Ext.id();
					div.className = 'multi-proxy';
					div.style.width = '200px';
					
					var record = theDataView.getRecord(sourceEl);
					
					var selectedRecords = [];
					var selectedNodes = [];
					
					var dataViewNodes = theDataView.getSelectedNodes();
					
					for(var i=0; i<dataViewNodes.length; i++)
					{
						var theNode = dataViewNodes[i];
						var theRecord = theDataView.getRecord(theNode);
					
						selectedNodes.push(theNode);
						selectedRecords.push(theRecord);
					}
					
					if(!theDataView.isSelected(sourceEl))
	    			{
	    				if(e.ctrlKey)
	    				{
	    					selectedRecords.push(record);
	    					selectedNodes.push(sourceEl);
	    				}
	    				else
	    				{
	    					selectedRecords = [record];
	    					selectedNodes = [sourceEl];
	    				}
	    			}	
	    			
	    			var htmlParts = [];
					var dragRecords = [];
	    			
					for(var i=0; i<selectedRecords.length; i++)
					{
						var selectedRecord = selectedRecords[i];
						var copyRecord = selectedRecord.copy(selectedRecord.id);
				
						htmlParts.push(this.template.apply(copyRecord.data));
						dragRecords.push(copyRecord);
					}
                		
					div.innerHTML = htmlParts.join('');
					
					this.itemDragData = {
						ddel: div,
						sourceEl: sourceEl,
						repairXY: Ext.fly(sourceEl).getXY(),
						sourceStore: theDataView.store,
						draggedRecords: dragRecords,
						draggedNodes: selectedNodes,
						items: dragRecords
					};
					
					theDataView.itemDragData = this.itemDragData;
                	
					return this.itemDragData;
				}
			},

			getRepairXY: function()
			{
        		return this.dragData.repairXY;
			}
		});
		
		this.dropZone = new Ext.dd.DropZone(theDataView.getEl(), {

			ddGroup: 'itemDD',
			
	        getTargetFromEvent: function(e) {
            	return e.getTarget(theDataView.itemSelector);
        	},
        	
        	onNodeOut : function(target, dd, e, data)
	        { 				
				theDataView.rollOutGhostNode(target);	
			},

	        onNodeOver : function(target, dd, e, data)
	        { 				
				theDataView.rollOverGhostNode(target);				        	
	        	
	        	if(this.isValidDropPoint(target, data))
	        	{
            		return Ext.dd.DropZone.prototype.dropAllowed;
            	}
            	else
            	{
            		return Ext.dd.DropZone.prototype.dropNotAllowed;
            	}
        	},
        	
			isValidDropPoint: function(target, data)
			{
				var dropRecord = theDataView.getRecord(target);
				var dropItem = dropRecord;
		
				var dragItems = data.items;
		
				for(var i=0; i<dragItems.length; i++)
				{
					var dragItem = dragItems[i];
			
					// we cannot drop something on itself
					if(dragItem.id == dropItem.id)
					{
						return false;
					}
			
					// checks with each item to make sure one can be added to the other
					if(!dropItem.canAddItem(dragItem))
					{
						return false;
					}
				}
			
				return true;
			},

	        onNodeDrop : function(target, dd, e, data){
	        	
	        	theDataView.unGhostAllNodes();
	        	
	        	if(!this.isValidDropPoint(target, data))
	        	{
	        		return;
	        	}
	        	
	        	var dropItem = theDataView.getRecord(target);
		
				theDataView.fireEvent('dropitems', dropItem, data.items);
				
            	return true;
        	}
        });

		
		this.setTemplate();
	},
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// Title Editor
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// edit the name of an item by single clicking
	// if titleNode is null it means remove the editor
	
    editItemTitle: function(titleNode, itemRecord, e)
    {
    	if(this.currentTitleEditor)
    	{
    		this.currentTitleEditor.resetEditor();
    		this.currentTitleEditor = null;
    	}
    	
    	if(titleNode==null) { return; }
    	
    	this.currentTitleEditor = new Webkit.Folders.ItemViewLabelEditor();
    	this.currentTitleEditor.doTitleEdit(titleNode, itemRecord, e);
    	
    	this.currentTitleEditor.addListener('tabpressed', this.titleEditorTabPressed, this);
    	this.currentTitleEditor.addListener('valuechanged', this.titleEditorValueChanged, this);
    },
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// called to hide the title editor as a result of another event
    
    hideTitleEditor: function()
    {
    	this.editItemTitle();
    },
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// edit the title of the next item
	
    titleEditorTabPressed: function(e)
    {
    	if(this.currentTitleEditor == null) { return; }
    	
    	
    	// ie really dosn't like this for 'some' reason
    	if(Ext.isIE) { return; }
    	
    	var currentRecord = this.currentTitleEditor.getRecord();
    	
    	var nextIndex = this.store.indexOf(currentRecord);
    	var totalItems = this.store.getCount();
    	
    	nextIndex++;
    	
    	if(nextIndex>=totalItems) { nextIndex = 0; }
    	
    	var nextRecord = this.store.getAt(nextIndex);
    	var nextNode = this.getNode(nextIndex);
    	var nextElement = new Ext.Element(nextNode);
    	
    	this.select(nextNode, false, true);
    	
    	var titleElement = nextElement.select('span.icons-title').first();
    	
    	this.editItemTitle.defer(10, this, [titleElement.dom, nextRecord, e]);
    },
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// commit the value of the title editor
	
    titleEditorValueChanged: function(changedRecord)
    {
    	this.store.resortData();
    	
    	this.refreshPanel();
    	
    	this.fireEvent('itemnamechanged', changedRecord);
    },

    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// TEMPLATE
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        
    
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// change the name of the template being used by this dataview
	
	setTemplate: function(templateName)
	{
		if(templateName != null)
    	{
    		this.currentTemplate = templateName;
    	}
    	
    	this.refreshPanel();
    },

	
	 //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// Construct the XTemplate being used by this view but with no grouping
    
	constructPlainTemplate: function(templateName)
	{
		return this.constructTemplate(templateName, true);
	},
	    
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// Construct the XTemplate being used by this view
    
	constructTemplate: function(templateName, plainTemplate)
    {
    	if(templateName==null)
    	{
    		templateName = this.currentTemplate;
    	}
    	
    	var html = 	''
    	+			'	<tpl for=".">'
    	+					this.templates[templateName]
    	+			'	</tpl>';

    	if((this.groupBy != null) && (!plainTemplate))
    	{
    		html = 	''
    		+		'	<tpl for=".">'
    		+		'			<div class="group-header-block" order="{order}">'
    		+		'				<img id="itemview-img-{order}" src="./images/folder_view/item_view_group_toggle_minus.gif" class="group-header-toggle" align="absmiddle" />'
    		+		'				<span class="group-header-item-title">'
    		+		'					{item_name}'
    		+		'				</span> - '
    		+		'				<span class="group-header-group-title">'
    		+		'					{group_name}'
    		+		'				</span>'
    		+		'			</div>'
    		+		'			<div class="group-header-divider">'
    		+		'			</div>'
    		+		'			<div class="group-items-block" id="itemview-group-{order}">'
    		+		'				<tpl for="items">'
    		+							this.templates[templateName]
    		+		'				</tpl>'
    		+		'			</div>'
    		+		'	</tpl>';
		}
		    	
    	var templateObject = new Ext.XTemplate(html);
        
        return templateObject;
    },    
    

    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// TOOLS
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	getCurrentItemTitle : function()
	{
		var ret = '';
		
		if(this.currentItem!=null)
		{
			ret = this.currentItem.get('name');
		}
		
		return ret;	
	},

	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// Normalizes the group title to display nicely
	
    getGroupTitle : function(value)
    {
    	if(this.groupBy == 'item_type')
    	{
    		value = Webkit.Folders.Schema.getItemTypeTitle(value);
    		
    		value += 's';
    		
    		return value;
    	}
    	
    	return Ext.capitalizeWord(value);
    },

	addLoadingMessage: function()
	{
		Webkit.Folders.App.prototype.addLoadingMessage();
	},
	
	removeLoadingMessage: function()
	{
		Webkit.Folders.App.prototype.removeLoadingMessage();
	}
	    
});
	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
//
//
//
// itemViewDragSelector
//
// this enables you to draw a box with the mouse that is used to select items in the view
//
//
//
//
//
//
//
//
//
//
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Webkit.Folders.ItemViewDragSelector = function(cfg)
{
	
    cfg = cfg || {};
    
    var view, regions, proxy, tracker;
    var rs, bodyRegion, dragRegion = new Ext.lib.Region(0,0,0,0);
    var dragSafe = cfg.dragSafe === true;
    var ctrlFlag = false;
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// init

    this.init = function(dataView)
    {
        view = dataView;
        
        view.addListener('render', onRender);
    };  
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// Post render setup
	
	function onRender(view)
	{
        tracker = new Ext.dd.DragTracker({
            onBeforeStart: onBeforeStart,
            onStart: onStart,
            onDrag: onDrag,
            onEnd: onEnd
        });
        tracker.initEl(view.el);
    }
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// This gives us the data of element positions

    function fillRegions()
    {
        rs = [];
        view.all.each(function(el){
            rs[rs.length] = el.getRegion();
        });
        bodyRegion = view.el.getRegion();
    }
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// cancel event
  
    function cancelClick()
    {
        return false;
    }
    
    //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// make sure we are configured to allow drag

    function onBeforeStart(e)
    {
		return !dragSafe || e.target == view.el.dom;
    }

	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// The drag has begun
	
    function onStart(e)
    {
    	view.dragSelectorUsed = false;
    	
        if(proxy)
        {
           proxy.remove();
        }
        
        proxy = view.el.createChild({cls:'x-view-selector'});
        
        fillRegions();
        
        ctrlFlag = false;
        
		for(var i = 0, len = rs.length; i < len; i++){
         	var r = rs[i];
         	r.wasSelected = view.isSelected(i);
		}
    }

	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// Continuous recalculation
	
    function onDrag(e)
    {
    	view.dragSelectorUsed = true;
    	
    	view.hideTitleEditor();
    	
        var startXY = tracker.startXY;
        var xy = tracker.getXY();

        var x = Math.min(startXY[0], xy[0]);
        var y = Math.min(startXY[1], xy[1]);
        var w = Math.abs(startXY[0] - xy[0]);
        var h = Math.abs(startXY[1] - xy[1]);

        dragRegion.left = x;
        dragRegion.top = y;
        dragRegion.right = x+w;
        dragRegion.bottom = y+h;

        dragRegion.constrainTo(bodyRegion);
        proxy.setRegion(dragRegion);

		if(!ctrlFlag)
		{
			if(!e.ctrlKey)
			{
				for(var i = 0, len = rs.length; i < len; i++){
         			var r = rs[i];
         			
         			if(r.wasSelected)
         			{
         				r.selected = false;
                		view.deselect(i);
         			}
				}
			}
			
			ctrlFlag = true;
		}
		
        for(var i = 0, len = rs.length; i < len; i++){
            var r = rs[i], sel = dragRegion.intersect(r);
            if(sel && !r.selected){
                r.selected = true;
                view.select(i, true);
            }else if(!sel && r.selected){
                r.selected = false;
                view.deselect(i);
            }
        }
    }

	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// The drag has ended
	
    function onEnd(e)
    {
        if(proxy)
        {
            proxy.setDisplayed(false);
        }
    }

};




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
//
//
//
//
//
//
//
//
//
// itemViewLabelEditor - lets you edit items name from the folder view
//
//
//
//
//
//
//
//
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Webkit.Folders.ItemViewLabelEditor = Ext.extend(Ext.Editor, {
    alignment: "tl-tl",
    hideEl : false,
    cls: "x-small-editor",
    shim: false,
    completeOnEnter: true,
    cancelOnEsc: true,
    labelSelector: 'span.x-editable',
    doneUpdate: false,
    
    constructor: function(cfg)
    {    	
		if(cfg==null) { cfg = {}; }
		
    	cfg.field = new Ext.form.TextField({
			allowBlank: false,
			growMin:90,
			growMax:240,
			grow:true,
			selectOnFocus:true
		});
		
		this.addEvents(
			'valuechanged',
			'tabpressed'
		);
		
		cfg.field.addListener('specialkey', this.fieldSpecialKey, this);
		
		this.addListener('beforehide', this.fieldHidden, this);
		
        Webkit.Folders.ItemViewLabelEditor.superclass.constructor.call(this, cfg);
    },
    
	// called when a special key is pressed - triggers the tabpressed event if it is a tab
    fieldSpecialKey: function(field, e)
    {
    	if (e.getKey() == e.TAB)
    	{
    		this.fireEvent('tabpressed', e);
    		e.stopEvent();
		}
    },
    
    // called once the field is finally hidden - this is where we will check to see if the value has changed
    fieldHidden: function()
    {
    	Ext.fly(this.currentTarget).setVisible(true);
    	
    	// lets see if the value has changed
    	// if it has we will trigger the 'valuechanged' event
    	
    	if(this.doneUpdate) { return; }
    	this.doneUpdate = true;
    	
    	var recordValue = this.currentRecord.get('name');
		
		var newValue = this.field.getValue();
		
		if((newValue!="")&&(newValue!=recordValue))
		{
			this.currentRecord.set('name', newValue);
			this.fireEvent('valuechanged', this.currentRecord);
		}
    },
        
    // called externally to hide this editor - this will in turn trigger the fieldHidden method
    resetEditor: function()
    {
		this.setVisible(false);
    },
    
    // accessor for the current record
    getRecord: function()
    {
    	return this.currentRecord;
    },
    
    // initialization method for editing an items title from the dataview
    doTitleEdit: function(target, targetRecord, e)
    {
    	this.currentTarget = target;
    	this.currentRecord = targetRecord;
    	
    	Ext.fly(target).setVisible(false);
    	
    	if(e!=null)
    	{
    		if(!e.ctrlKey && !e.shiftKey)
    		{    
	            e.stopEvent();

            	this.startEdit(target);
        	}
        	else
        	{
	            e.preventDefault();
        	}
        }
        else
        {
        	e.stopEvent();
        	
			this.startEdit(target);
        }
    }
});