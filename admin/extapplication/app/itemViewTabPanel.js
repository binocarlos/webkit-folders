////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// ItemView.js
//
//
// the main interface for looking at the contents of an item
// it deals with different templating selections for different types of item
// at the moment only really deals with folders
//
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Webkit.Folders.ItemViewTabPanel = Ext.extend(Ext.util.Observable, {
	
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
// INIT
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	

	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// initial variables
	
	viewCache: {},
	
	currentItemView: null,
	
	
	//////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////
	// required params:
	//		id		= the id of this component
	//		name	= the title this component
	//		uri		= the data uri this component will use
		
    constructor: function(config)
    {	
    	Ext.apply(this, config);
    
        Webkit.Folders.ItemViewTabPanel.superclass.constructor.call(config);
        
        this.createGUI();
        this.createEvents();
	},
	
	createEvents: function()
	{
		this.addEvents(
			'afterrender'
		);
	},
	
	createGUI: function()
	{
		this.defaultFolderView = new Webkit.Folders.ItemView({
			id:'defaultfolderView',
			name:this.rootFolderName,
			renderConfig:this.renderConfig,
			uri:this.uri
		});
		
		this.viewCache['default'] = this.defaultFolderView;
		
		this.currentItemView = this.defaultFolderView;
		
		var tabPanelConfig = {
			border:false,
			style:'border-left: #99bbe8 1px solid;',
			region:'center',
			activeTab:0,
			items:[
				 this.defaultFolderView.panel
			]
		};
		
		if(this.renderConfig)
		{
			tabPanelConfig.renderTo = this.renderConfig.view.div;
			tabPanelConfig.height = this.renderConfig.view.height;
			tabPanelConfig.autoHeight = true;
		}
		else
		{
			tabPanelConfig.autoHeight = false;
		}
		
		this.panel = new Ext.TabPanel(tabPanelConfig);
		
		this.panel.addListener('afterrender', this.panelRendered, this);
	},
	
	panelRendered: function()
	{
		this.fireEvent('afterrender');
	},
	
	getItemView: function()
	{
		return this.currentItemView;
	},
	
	addItem: function(forItem)
	{
		
	},
	
	replaceItem: function(forItem)
	{
		var theView = this.getItemView();
		
		theView.openItem(forItem);
	},
	
	addItemTab: function(forItem)
	{
		return;
		var folderView = new Webkit.Folders.ItemView({
			id:'folderView_' + forItem.id,
			name:forItem.name,
			uri:this.uri
		});
		
		this.add(folderView);	
	}
	

});